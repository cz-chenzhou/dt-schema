#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2018 Linaro Ltd.
# Copyright 2018 Arm Ltd.

import signal

def sigint_handler(signum, frame):
    sys.exit(-2)

signal.signal(signal.SIGINT, sigint_handler)

import sys
import os
import ruamel.yaml
import jsonschema
import argparse
import glob

import dtschema

yaml = ruamel.yaml.YAML()

verbose = False

class schema_group():
    def __init__(self, schema_file=""):
        self.schemas = list()

        if schema_file == "" or os.path.isdir(schema_file):
            self.schemas = dtschema.process_schemas(schema_file)
        elif os.path.isfile(schema_file):
            self.schemas = yaml.load(open(schema_file).read())
        else:
            exit(-1)

    def check_node(self, tree, nodename, node, filename):
        node['$nodename'] = nodename
        node_matched = False
        for schema in self.schemas:
            if schema['$select_validator'].is_valid(node):
                node_matched = True
                errors = sorted(dtschema.DTValidator(schema).iter_errors(node), key=lambda e: e.linecol)
                for error in errors:
                    print(dtschema.format_error(filename, error))
        if not node_matched and verbose:
            if 'compatible' in node:
                print("%s:%i:%i: %s failed to match any schema with compatible(s) %s" % (filename, node.lc.line, node.lc.col, nodename, node["compatible"]))
            else:
                print("%s: node %s failed to match any schema" % (filename, nodename))

    def check_subtree(self, tree, nodename, subtree, filename):
        self.check_node(tree, nodename, subtree, filename)
        for name,value in subtree.items():
            if type(value) == ruamel.yaml.comments.CommentedMap:
                self.check_subtree(tree, name, value, filename)

    def check_trees(self, filename, dt):
        """Check the given DT against all schemas"""

        for schema in self.schemas:
            schema["$select_validator"] = jsonschema.Draft6Validator(schema['select'])

        for subtree in dt:
            self.check_subtree(dt, "/", subtree, filename)

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("yamldt", nargs='*',
                    help="Filename or directory of YAML encoded devicetree input file(s)")
    ap.add_argument('-s', '--schema', help="path to additional additional schema files")
    ap.add_argument('-p', '--preparse', help="preparsed schema file")
    ap.add_argument('-v', '--verbose', help="verbose mode", action="store_true")
    args = ap.parse_args()

    verbose = args.verbose

    if args.preparse:
        sg = schema_group(args.preparse)
    elif args.schema:
        sg = schema_group(args.schema)
    else:
        sg = schema_group()

    if os.path.isdir(args.yamldt[0]):
        for filename in glob.iglob(args.yamldt + "/**/*.yaml", recursive=True):
            testtree = dtschema.load(open(filename).read())
            if verbose:
                print("Check:  " + filename)
            sg.check_trees(filename, testtree)
    else:
        for filename in args.yamldt:
            testtree = dtschema.load(open(filename).read())
            if verbose:
                print("Check:  " + filename)
            sg.check_trees(filename, testtree)
