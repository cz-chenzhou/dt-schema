#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2018 Linaro Ltd.
# Copyright 2018 Arm Ltd.

import signal

def sigint_handler(signum, frame):
    sys.exit(-2)

signal.signal(signal.SIGINT, sigint_handler)

import os
import sys
#basedir = os.path.dirname(__file__)
import ruamel.yaml
#sys.path.insert(0, os.path.join(basedir, ".."))
import dtschema
import argparse
import glob

def check_doc(filename):
    try:
        testtree = dtschema.load(open(filename, encoding='utf-8').read())
    except (ruamel.yaml.scanner.ScannerError, ruamel.yaml.parser.ParserError) as exc:
        print(filename + ": ", exc)
        return
    except ruamel.yaml.YAMLError as exc:
        print(filename + ":", exc.path[-1], exc.message)
        return

    for error in sorted(dtschema.DTValidator.iter_schema_errors(testtree), key=lambda e: e.linecol):
        print(dtschema.format_error(filename, error, verbose=False))


if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("yamldt", type=str,
                    help="Filename of YAML encoded devicetree input file")
    args = ap.parse_args()

    if os.path.isdir(args.yamldt):
        for filename in glob.iglob(args.yamldt + "/**/*.yaml", recursive=True):
            check_doc(filename)
    else:
        check_doc(args.yamldt)
